//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.2.
//


package com.lifeix.androidbasecoredemo.activity;

import android.app.NotificationManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.text.Html;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.TextView;
import com.lifeix.androidbasecoredemo.DemoApplication_;
import com.lifeix.androidbasecoredemo.R.color;
import com.lifeix.androidbasecoredemo.R.dimen;
import com.lifeix.androidbasecoredemo.R.id;
import com.lifeix.androidbasecoredemo.R.layout;
import com.lifeix.androidbasecoredemo.R.string;
import com.lifeix.androidbasecoredemo.bean.User_;
import com.lifeix.androidbasecoredemo.view.CustomButton;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class SimpleActivity_
    extends SimpleActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    public final static String COME_FROM_PARAM_EXTRA = "comeFrom";
    public final static String COME_FROM_EXTRA = "comeFrom";
    private final IntentFilter intentFilter1_ = new IntentFilter();
    private final BroadcastReceiver onBroadcastReceiverAction_ClickReceiver_ = new BroadcastReceiver() {


        public void onReceive(Context context, Intent intent) {
            SimpleActivity_.this.onBroadcastReceiverAction_Click(intent);
        }

    }
    ;
    public final static String RESULT_NUMBER_EXTRA = "resultNumber";

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.activity_simple);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        Resources resources_ = this.getResources();
        title = resources_.getString(string.app_name);
        app_name = resources_.getString(string.app_name);
        htmlCotent = Html.fromHtml(resources_.getString(string.content_html));
        fontsize = resources_.getDimension(dimen.fontsize);
        fontSizeDimension = resources_.getDimension(dimen.fontsize);
        fontsizePix = resources_.getDimensionPixelOffset(dimen.fontsizePix);
        fontSizeDimensionPix = resources_.getDimensionPixelOffset(dimen.fontsizePix);
        fontsizePix2 = resources_.getDimensionPixelSize(dimen.fontsizePix2);
        fontSizeDimensionPix2 = resources_.getDimensionPixelSize(dimen.fontsizePix);
        backgroundColor = resources_.getColor(color.backgroundColor);
        someColor = resources_.getColor(color.backgroundColor);
        manager = ((NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE));
        application = DemoApplication_.getInstance();
        SimpleActivity_.NonConfigurationInstancesHolder nonConfigurationInstance = ((SimpleActivity_.NonConfigurationInstancesHolder) super.getLastCustomNonConfigurationInstance());
        if (nonConfigurationInstance!= null) {
            manager = nonConfigurationInstance.manager;
        }
        user = User_.getInstance_(this);
        injectExtras_();
        intentFilter1_.addAction("com.lifeix.androidbasecore.hit");
        this.registerReceiver(onBroadcastReceiverAction_ClickReceiver_, intentFilter1_);
        afterInject();
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static SimpleActivity_.IntentBuilder_ intent(Context context) {
        return new SimpleActivity_.IntentBuilder_(context);
    }

    public static SimpleActivity_.IntentBuilder_ intent(Fragment supportFragment) {
        return new SimpleActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        button = ((CustomButton) hasViews.findViewById(id.btn_custom));
        textView = ((TextView) hasViews.findViewById(id.txt_html_content));
        btn_custom = button;
        if (textView!= null) {
            textView.setText(Html.fromHtml(this.getString(string.content_html)));
        }
        {
            View view = hasViews.findViewById(id.btn_to_download);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        SimpleActivity_.this.toDownlaod();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.vg_title);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        SimpleActivity_.this.vg_title();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.btn_to_sub);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        SimpleActivity_.this.toSub();
                    }

                }
                );
            }
        }
        if (button!= null) {
            button.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    SimpleActivity_.this.customClick();
                }

            }
            );
        }
        afterViews();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater menuInflater = getMenuInflater();
        menuInflater.inflate(com.lifeix.androidbasecoredemo.R.menu.main, menu);
        menuSettings = menu.findItem(id.action_settings);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        boolean handled = super.onOptionsItemSelected(item);
        if (handled) {
            return true;
        }
        int itemId_ = item.getItemId();
        if (itemId_ == id.action_settings) {
            onMenuSettings();
            return true;
        }
        return false;
    }

    @Override
    public Object getLastCustomNonConfigurationInstance() {
        SimpleActivity_.NonConfigurationInstancesHolder nonConfigurationInstance = ((SimpleActivity_.NonConfigurationInstancesHolder) super.getLastCustomNonConfigurationInstance());
        if (nonConfigurationInstance == null) {
            return null;
        }
        return nonConfigurationInstance.superNonConfigurationInstance;
    }

    @Override
    public SimpleActivity_.NonConfigurationInstancesHolder onRetainCustomNonConfigurationInstance() {
        SimpleActivity_.NonConfigurationInstancesHolder nonConfigurationInstanceState_ = new SimpleActivity_.NonConfigurationInstancesHolder();
        nonConfigurationInstanceState_.superNonConfigurationInstance = super.onRetainCustomNonConfigurationInstance();
        nonConfigurationInstanceState_.manager = manager;
        return nonConfigurationInstanceState_;
    }

    private void injectExtras_() {
        Bundle extras_ = getIntent().getExtras();
        if (extras_!= null) {
            if (extras_.containsKey(COME_FROM_PARAM_EXTRA)) {
                comeFromParam = extras_.getString(COME_FROM_PARAM_EXTRA);
            }
            if (extras_.containsKey(COME_FROM_EXTRA)) {
                comeFrom = extras_.getString(COME_FROM_EXTRA);
            }
            afterExtras();
        }
    }

    @Override
    public void setIntent(Intent newIntent) {
        super.setIntent(newIntent);
        injectExtras_();
    }

    @Override
    public void onDestroy() {
        this.unregisterReceiver(onBroadcastReceiverAction_ClickReceiver_);
        super.onDestroy();
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case  4098 :
                SimpleActivity_.this.onActivityResult(resultCode, data);
                {
                    Bundle extras_ = (((data!= null)&&(data.getExtras()!= null))?data.getExtras():new Bundle());
                    int resultNumber = extras_.getInt(RESULT_NUMBER_EXTRA);
                    SimpleActivity_.this.onActivityResultDetails(resultNumber);
                }
                break;
        }
    }

    @Override
    public void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        setIntent(intent);
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<SimpleActivity_.IntentBuilder_>
    {

        private Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, SimpleActivity_.class);
        }

        public IntentBuilder_(Fragment fragment) {
            super(fragment.getActivity(), SimpleActivity_.class);
            fragmentSupport_ = fragment;
        }

        @Override
        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                super.startForResult(requestCode);
            }
        }

        public SimpleActivity_.IntentBuilder_ comeFromParam(String comeFromParam) {
            return super.extra(COME_FROM_PARAM_EXTRA, comeFromParam);
        }

        public SimpleActivity_.IntentBuilder_ comeFrom(String comeFrom) {
            return super.extra(COME_FROM_EXTRA, comeFrom);
        }

    }

    private static class NonConfigurationInstancesHolder {

        public NotificationManager manager;
        public Object superNonConfigurationInstance;

    }

}
