//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.2.
//


package com.lifeix.androidbasecoredemo.fragment;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ListView;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.widget.TextView;
import com.lifeix.androidbasecoredemo.DemoApplication_;
import com.lifeix.androidbasecoredemo.R.layout;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.builder.FragmentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class SimpleFragment_
    extends com.lifeix.androidbasecoredemo.fragment.SimpleFragment
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    public final static String TITLE_ARG = "title";
    public final static String MSG_ARG = "msg";
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public View findViewById(int id) {
        if (contentView_ == null) {
            return null;
        }
        return contentView_.findViewById(id);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(layout.fragment_simple, container, false);
        }
        return contentView_;
    }

    @Override
    public void onDestroyView() {
        contentView_ = null;
        super.onDestroyView();
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        injectFragmentArguments_();
        application = DemoApplication_.getInstance();
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static SimpleFragment_.FragmentBuilder_ builder() {
        return new SimpleFragment_.FragmentBuilder_();
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        lsvContacts = ((ListView) hasViews.findViewById(com.lifeix.androidbasecoredemo.R.id.lsv_contacts));
        seekBar = ((SeekBar) hasViews.findViewById(com.lifeix.androidbasecoredemo.R.id.sb_progrecess));
        txtLabel = ((TextView) hasViews.findViewById(com.lifeix.androidbasecoredemo.R.id.txt_label));
        if (lsvContacts!= null) {
            lsvContacts.setOnItemClickListener(new OnItemClickListener() {


                @Override
                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                    SimpleFragment_.this.onItemClicked(((String) parent.getAdapter().getItem(position)));
                }

            }
            );
            lsvContacts.setOnItemSelectedListener(new OnItemSelectedListener() {


                @Override
                public void onNothingSelected(AdapterView<?> parent) {
                    SimpleFragment_.this.onItemSelected(false, null);
                }

                @Override
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                    SimpleFragment_.this.onItemSelected(true, ((String) parent.getAdapter().getItem(position)));
                }

            }
            );
            lsvContacts.setOnItemLongClickListener(new OnItemLongClickListener() {


                @Override
                public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                    SimpleFragment_.this.lsv_contacts(((String) parent.getAdapter().getItem(position)));
                    return true;
                }

            }
            );
        }
        {
            final TextView view = ((TextView) hasViews.findViewById(com.lifeix.androidbasecoredemo.R.id.txt_label));
            if (view!= null) {
                view.addTextChangedListener(new TextWatcher() {


                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                        SimpleFragment_.this.beforeTextChange(view, s, start, count, after);
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                        SimpleFragment_.this.onTextChange(view, s);
                        SimpleFragment_.this.onTextChange(view);
                        SimpleFragment_.this.onTextChange();
                        SimpleFragment_.this.onTextChange(s, view, before, start, count);
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        SimpleFragment_.this.afterTextChange(s, view);
                    }

                }
                );
            }
        }
        {
            final SeekBar view = ((SeekBar) hasViews.findViewById(com.lifeix.androidbasecoredemo.R.id.sb_progrecess));
            if (view!= null) {
                view.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {


                    @Override
                    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                        SimpleFragment_.this.onProgressChanged(seekBar, progress, fromUser);
                    }

                    @Override
                    public void onStartTrackingTouch(SeekBar seekBar) {
                        SimpleFragment_.this.onStartTrackingTouch(seekBar);
                    }

                    @Override
                    public void onStopTrackingTouch(SeekBar seekBar) {
                        SimpleFragment_.this.onStopTrackingTouch(seekBar);
                    }

                }
                );
            }
        }
        init();
    }

    private void injectFragmentArguments_() {
        Bundle args_ = getArguments();
        if (args_!= null) {
            if (args_.containsKey(TITLE_ARG)) {
                title = args_.getString(TITLE_ARG);
            }
            if (args_.containsKey(MSG_ARG)) {
                msg = args_.getString(MSG_ARG);
            }
        }
    }

    @Override
    public void showListView() {
        if (Thread.currentThread() == Looper.getMainLooper().getThread()) {
            SimpleFragment_.super.showListView();
            return ;
        }
        handler_.post(new Runnable() {


            @Override
            public void run() {
                SimpleFragment_.super.showListView();
            }

        }
        );
    }

    @Override
    public void excuteInUIThread() {
        handler_.postDelayed(new Runnable() {


            @Override
            public void run() {
                SimpleFragment_.super.excuteInUIThread();
            }

        }
        , 500L);
    }

    @Override
    public void doInBackgroundAfterTwoSeconds() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 2000, "") {


            @Override
            public void execute() {
                try {
                    SimpleFragment_.super.doInBackgroundAfterTwoSeconds();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void someSequentialBackgroundTask(final int i) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "test") {


            @Override
            public void execute() {
                try {
                    SimpleFragment_.super.someSequentialBackgroundTask(i);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void loadDataFromDB() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("loadData", 2000, "") {


            @Override
            public void execute() {
                try {
                    SimpleFragment_.super.loadDataFromDB();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class FragmentBuilder_
        extends FragmentBuilder<SimpleFragment_.FragmentBuilder_, com.lifeix.androidbasecoredemo.fragment.SimpleFragment>
    {


        @Override
        public com.lifeix.androidbasecoredemo.fragment.SimpleFragment build() {
            SimpleFragment_ fragment_ = new SimpleFragment_();
            fragment_.setArguments(args);
            return fragment_;
        }

        public SimpleFragment_.FragmentBuilder_ title(String title) {
            args.putString(TITLE_ARG, title);
            return this;
        }

        public SimpleFragment_.FragmentBuilder_ msg(String msg) {
            args.putString(MSG_ARG, msg);
            return this;
        }

    }

}
